# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NomenclatorDockWidget
                                 A QGIS plugin
 Editor de la toponimia del Nomenclator Toponìmic Valencià
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Alfonso Moya Fuero
        email                : almofue@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime  # Para rellanar con la fecha el campo "fechaalta
import uuid  # Para rellenar con identificador unico el campo globalid

from PyQt5.QtWidgets import QFileDialog, QMessageBox, QWidget
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, QVariant, QDir
from qgis.core import QgsRasterLayer, QgsProject, QgsFields, QgsVectorLayer, QgsVectorFileWriter, QgsField, \
    QgsCoordinateReferenceSystem, QgsFeatureRequest
from qgis.utils import iface


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Nomenclator_modulo_dockwidget_base.ui'))


class NomenclatorDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(NomenclatorDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.iface = iface
        self.setupUi(self)


        # Conecatamos los eventos de los controles del widget
        self.btn_comprobar.clicked.connect(self.recogerRuta)
        self.btn_editar.clicked.connect(self.addtoponimo)  # Comenzamos a insertar toponimos
        self.chk_ortofoto.clicked.connect(self.activaorto)  # Para activar / desactivar la orto
        self.chk_toponimia.clicked.connect(self.activatoponimia)  # Para activar / desactivar la toponimia
        self.chk_topografico.clicked.connect(self.activatopografico)  # Para activar / desactivar el topografico
        self.cbx_uno.currentTextChanged.connect(self.lista_cbx_dos)  # Rellenamos el seguno combo box al llenarse el primero
        self.cbx_dos.currentTextChanged.connect(self.lista_cbx_tres)  # Rellenamos el tercer combo box al llenarse el segundo
        self.cbx_tres.currentTextChanged.connect(self.activa_edicion)  # Activamos la edicion con el boton

    def recogerRuta(self, event):  # Funcion para cargar las capas que necesitaremos, si no existen se crean
        # Limpiamos cache del proyecto
        self.iface.mapCanvas().clearCache()
        self.iface.mapCanvas().refresh()
        dic_path = os.path.dirname(os.path.realpath(__file__)) + '/datos/dic_toponimia.dbf'
        print(dic_path)
        if os.path.isfile(dic_path):
            dic_layer = iface.addVectorLayer(dic_path, "dic_toponimia", "ogr")
            dic_layer.setProviderEncoding(u'Latin1')
            if not dic_layer.isValid():
                print("Layer failed to load!")
            else:
                print("Layer valido")
            # self.cbx_uno.setEnabled(True)
                features = dic_layer.getFeatures()
                for feature in features:  # Rellenamos el primer combobox con los elementos de primer nivel toponimico
                    if len(str(feature["clave"])) == 1:
                        self.cbx_uno.addItem(feature["elemento"])
        ruta = QFileDialog.getExistingDirectory(self, 'Selecciona directorio')
        print(ruta)
        file_punto = ruta + '/edit_topo_punto.shp'
        file_linea = ruta + '/edit_topo_linea.shp'
        file_poligono = ruta + '/edit_topo_poligono.shp'
        mensaje = ''
        print(file_linea)
        crs = QgsCoordinateReferenceSystem('EPSG:25830')
        if os.path.isfile(file_punto):
            mensaje = mensaje + 'La capa edit_topo_punto.shp existe' + "\n"
            layer_punto = iface.addVectorLayer(file_punto, "", "ogr")
        else:
            vlpoint = QgsVectorLayer('point', 'edit_topo_punto', 'memory')
            prpoint = vlpoint.dataProvider()
            prpoint.addAttributes([QgsField("id", QVariant.Int),
                                   QgsField("clave_top", QVariant.String, len=15),
                                   QgsField("elemento", QVariant.String),
                                   QgsField("texto_norm", QVariant.String, len=100),
                                   QgsField("top_mayor", QVariant.String, len=20),
                                   QgsField("globalid", QVariant.String, len=38),
                                   QgsField("usuario", QVariant.String, len=100),
                                   QgsField("fechaalta", QVariant.String, len=20),
                                   QgsField("elemento", QVariant.String, len=1)])
            vlpoint.updateFields()
            msg_point = QgsVectorFileWriter.writeAsVectorFormat(vlpoint, file_punto, 'utf-8', crs,
                                                                driverName="ESRI Shapefile")
            if msg_point[0] != 0:
                print(msg_point)
            else:
                print("El fichero se ha creado correctamente")
                layer_punto = iface.addVectorLayer(file_punto, "", "ogr")
            mensaje = mensaje + 'La capa edit_topo_punto.shp no existe, se ha creado' + "\n"
        if os.path.isfile(file_linea):
            mensaje = mensaje + 'La capa edit_topo_linea.shp existe' + "\n"
            layer_linea = iface.addVectorLayer(file_linea, "", "ogr")
        else:
            vllinea = QgsVectorLayer('line', 'edit_topo_linea', 'memory')
            prlinea = vllinea.dataProvider()
            prlinea.addAttributes([QgsField("id", QVariant.Int),
                                   QgsField("clave_top", QVariant.String, len=15),
                                   QgsField("elemento", QVariant.String),
                                   QgsField("texto_norm", QVariant.String, len=100),
                                   QgsField("top_mayor", QVariant.String, len=20),
                                   QgsField("globalid", QVariant.String, len=38),
                                   QgsField("usuario", QVariant.String, len=100),
                                   QgsField("fechaalta", QVariant.String, len=20),
                                   QgsField("elemento", QVariant.String, len=1)])
            vllinea.updateFields()
            msg_linea = QgsVectorFileWriter.writeAsVectorFormat(vllinea, file_linea, 'utf-8', crs,
                                                                driverName="ESRI Shapefile")
            if msg_linea[0] != 0:
                print(msg_linea)
            else:
                print("El fichero se ha creado correctamente")
                layer_linea = iface.addVectorLayer(file_linea, "", "ogr")
            mensaje = mensaje + 'La capa edit_topo_linea.shp no existe, se ha creado' + "\n"
        if os.path.isfile(file_poligono):
            mensaje = mensaje + 'La capa edit_topo_poligono.shp existe' + "\n"
            layer_polygon = iface.addVectorLayer(file_poligono, "", "ogr")
        else:
            vlpoly = QgsVectorLayer('polygon', 'edit_topo_poligono', 'memory')
            prpoly = vlpoly.dataProvider()
            prpoly.addAttributes([QgsField("id", QVariant.Int),
                                  QgsField("clave_top", QVariant.String, len=15),
                                  QgsField("elemento", QVariant.String),
                                  QgsField("texto_norm", QVariant.String, len=100),
                                  QgsField("top_mayor", QVariant.String, len=20),
                                  QgsField("globalid", QVariant.String, len=38),
                                  QgsField("usuario", QVariant.String, len=100),
                                  QgsField("fechaalta", QVariant.String, len=20),
                                  QgsField("elemento", QVariant.String, len=1)])
            vlpoly.updateFields()
            msg_poly = QgsVectorFileWriter.writeAsVectorFormat(vlpoly, file_poligono, 'utf-8', crs,
                                                               driverName="ESRI Shapefile")
            if (msg_poly[0] != 0):
                print(msg_poly)
            else:
                print('El fichero se ha creado correctamente')
                layer_polygon = iface.addVectorLayer(file_poligono, "", "ogr")
            mensaje = mensaje + 'La capa edit_topo_poligono.shp no existe, se ha creado' + "\n"
        QMessageBox.information(self.iface.mainWindow(), 'informacion de capas', mensaje)
        self.txt_ruta.setText('Ruta: ' + ruta)

    def lista_cbx_dos(self, event):  # Rellenamos el segundo combobox con los elementos de segundo nivel toponimico
        self.cbx_dos.setEnabled(True)
        self.cbx_dos.clear()
        dic_layer = QgsProject.instance().mapLayersByName('dic_toponimia')[0]
        features = dic_layer.getFeatures()
        index = self.cbx_uno.currentIndex() + 1
        query = 'length("clave") = 3 and left("clave",1) = ' + str(index)
        dic_layer.selectByExpression(query, QgsVectorLayer.SetSelection)
        selection = dic_layer.selectedFeatures()
        for feature in selection:
            self.cbx_dos.addItem(feature["elemento"])

    def lista_cbx_tres(self, event):  # Rellenamos el tercer combobox con los elementos de tercer nivel toponimico
        self.cbx_tres.setEnabled(True)
        self.cbx_tres.clear()
        dic_layer = QgsProject.instance().mapLayersByName('dic_toponimia')[0]
        features = dic_layer.getFeatures()
        texto = self.cbx_dos.currentText()
        query2 = '"elemento" like \'' + texto + '\''
        dic_layer.removeSelection()
        dic_layer.selectByExpression(query2, QgsVectorLayer.SetSelection)
        selection = dic_layer.selectedFeatures()
        for feature in selection:
            clave_n = feature["clave"]
            query3 = 'length("clave") > 3 and left("clave",3) = \'' + clave_n + '\''
            dic_layer.selectByExpression(query3, QgsVectorLayer.SetSelection)
            selection3 = dic_layer.selectedFeatures()
            for feature in selection3:
                self.cbx_tres.addItem(feature["elemento"])
            self.btn_comprobar.clicked.connect(self.addtoponimo)

    def activa_edicion(self, event):  # Actvamos la edicion del toponimo segun sea punto,linea o poligono
        dic_layer = QgsProject.instance().mapLayersByName('dic_toponimia')[0]
        features = dic_layer.getFeatures()
        texto = self.cbx_tres.currentText()
        query2 = '"elemento" like \'' + texto + '\''
        dic_layer.removeSelection()
        dic_layer.selectByExpression(query2, QgsVectorLayer.SetSelection)
        selection = dic_layer.selectedFeatures()
        for feature in selection:
            clave_n = feature["clave"]
            self.txt_clave.setText(clave_n)
            query3 = '"clave" = \'' + clave_n + '\''
            dic_layer.selectByExpression(query3, QgsVectorLayer.SetSelection)
            selection3 = dic_layer.selectedFeatures()
            for feature in selection3:
                self.txt_tipo_geom.setText(feature["Tipo"])

    def addtoponimo(self, event):  # Activamos la edicion de la capa correspomdiente
        texto = self.txt_tipo_geom.text()
        print(texto)
        if texto == 'Point':
            edit_layer = QgsProject.instance().mapLayersByName('edit_topo_punto')[0]
            edit_layer.startEditing()
            self.iface.setActiveLayer(edit_layer)
            self.iface.activeLayer().editingStopped.connect(self.editing_stopped_punto)
        if texto == 'Line':
            edit_layer = QgsProject.instance().mapLayersByName('edit_topo_linea')[0]
            edit_layer.startEditing()
            self.iface.setActiveLayer(edit_layer)
            self.iface.activeLayer().editingStopped.connect(self.editing_stopped_linea)
        if texto == 'Polygon':
            edit_layer = QgsProject.instance().mapLayersByName('edit_topo_poligono')[0]
            edit_layer.startEditing()
            self.iface.setActiveLayer(edit_layer)
            self.iface.activeLayer().editingStopped.connect(self.editing_stopped_poligono)

    def editing_stopped_punto(self):  # Añadimos los atributos al toponimo puntual añadido
        now = datetime.datetime.now()
        edit_layer = QgsProject.instance().mapLayersByName('edit_topo_punto')[0]
        self.iface.setActiveLayer(edit_layer)
        c = edit_layer.featureCount() - 1
        edit_layer.startEditing()
        feature = edit_layer.getFeature(c)
        feature["id"] = c
        feature["usuario"] = self.txt_usuario.toPlainText()
        feature["elemento"] = self.cbx_tres.currentText()
        feature["clave_top"] = self.txt_clave.text()
        feature["globalid"] = str(uuid.uuid4())
        feature["fechaalta"] = str(now.strftime("%Y-%m-%d %H:%M:%S"))
        edit_layer.updateFeature(feature)
        edit_layer.commitChanges()
        edit_layer.stopEditing()
        # self.iface.vectorLayerTools().stopEditing(edit_layer, False)
        # edit_layer.endEditCommand()


    def editing_stopped_linea(self):  # Añadimos los atributos al toponimo lineal añadido
        now = datetime.datetime.now()
        edit_layer = QgsProject.instance().mapLayersByName('edit_topo_linea')[0]
        self.iface.setActiveLayer(edit_layer)
        c = edit_layer.featureCount() - 1
        edit_layer.startEditing()
        feature = edit_layer.getFeature(c)
        feature["id"] = c
        feature["usuario"] = self.txt_usuario.toPlainText()
        feature["elemento"] = self.cbx_tres.currentText()
        feature["clave_top"] = self.txt_clave.text()
        feature["globalid"] = str(uuid.uuid4())
        feature["fechaalta"] = str(now.strftime("%Y-%m-%d %H:%M:%S"))
        edit_layer.updateFeature(feature)
        edit_layer.commitChanges()
        edit_layer.stopEditing()
        # self.iface.vectorLayerTools().stopEditing(edit_layer, False)
        # edit_layer.endEditCommand()

    def editing_stopped_poligono(self):  # Añadimos los atributos al toponimo poligonal añadido
        now = datetime.datetime.now()
        edit_layer = QgsProject.instance().mapLayersByName('edit_topo_poligono')[0]
        self.iface.setActiveLayer(edit_layer)
        c = edit_layer.featureCount() - 1
        edit_layer.startEditing()
        feature = edit_layer.getFeature(c)
        feature["id"] = c
        feature["usuario"] = self.txt_usuario.toPlainText()
        feature["elemento"] = self.cbx_tres.currentText()
        feature["clave_top"] = self.txt_clave.text()
        feature["globalid"] = str(uuid.uuid4())
        feature["fechaalta"] = str(now.strftime("%Y-%m-%d %H:%M:%S"))
        edit_layer.updateFeature(feature)
        edit_layer.commitChanges()
        edit_layer.stopEditing()
        # self.iface.vectorLayerTools().stopEditing(edit_layer, False)
        # edit_layer.endEditCommand()


    def activaorto(self, event):  # Activamos o desactivamos capa de ortofoto PNOA

        if self.chk_ortofoto.isChecked():
            urlWithParams = 'url=http://www.ign.es/wms-inspire/pnoa-ma?&format=image/png&layers=OI.OrthoimageCoverage&styles=default&crs=EPSG:25830'
            rasterLyr = QgsRasterLayer(urlWithParams, 'PNOA ortofoto', 'wms')
            if not rasterLyr.isValid():
                print("Capa no válida")
                iface.messageBar().pushMessage("Error", "Capa no válida", level=Qgis.Critical, duration=5)
            else:
                QgsProject.instance().addMapLayers([rasterLyr])
        else:
            QgsProject.instance().removeMapLayer(QgsProject.instance().mapLayersByName('PNOA ortofoto')[0].id())
            iface.mapCanvas().refresh()

    def activatoponimia(self, event):  # Activamos o desactivamos capa de toponimia

        if self.chk_toponimia.isChecked():
            urlWithParams = 'url=http://terramapas.icv.gva.es/toponimia_base?&format=image/png&layers=NOMENCLATOR_ICV&styles=default&crs=EPSG:25830'
            rasterLyr = QgsRasterLayer(urlWithParams, 'Toponimia base', 'wms')
            if not rasterLyr.isValid():
                print("Capa no válida")
                iface.messageBar().pushMessage("Error", "Capa no válida", level=Qgis.Critical, duration=5)
            else:
                QgsProject.instance().addMapLayers([rasterLyr])
        else:
            QgsProject.instance().removeMapLayer(QgsProject.instance().mapLayersByName('Toponimia base')[0].id())
            iface.mapCanvas().refresh()

    def activatopografico(self, event):  # Activamos o desactivamos capa de mapa topografico del IGN

        if self.chk_topografico.isChecked():
            urlWithParams = 'url=http://www.ign.es/wms-inspire/mapa-raster?&format=image/png&layers=mtn_rasterizado&styles=default&crs=EPSG:25830'
            rasterLyr = QgsRasterLayer(urlWithParams, 'Topografico base', 'wms')
            if not rasterLyr.isValid():
                print("Capa no válida")
                iface.messageBar().pushMessage("Error", "Capa no válida", level=Qgis.Critical, duration=5)
            else:
                QgsProject.instance().addMapLayers([rasterLyr])
        else:
            QgsProject.instance().removeMapLayer(QgsProject.instance().mapLayersByName('Topografico base')[0].id())
            iface.mapCanvas().refresh()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
